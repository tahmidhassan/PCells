import pya

class Moire_Type_A(pya.PCellDeclarationHelper):
  """
  Input: length, period_1, period_2, wg_width, modulation, duty cycle
  Moire Type A structure: 
  cite my paper here: 
  written by: Tahmid H. Talukdar 
  Clemson University 
  """

  def __init__(self):

    # Important: initialize the super class
    super(Moire_Type_A, self).__init__()

    # declare the parameters
    self.param("layer", self.TypeLayer, "Layer", default = pya.LayerInfo(1, 0))
    self.param("length", self.TypeDouble, "Waveguide length", default = 10.0)     
    self.param("period_1", self.TypeDouble, "Target period 1 (microns)", default = 0.317)  
    self.param("period_2", self.TypeDouble, "Target period 2 (microns)", default = 0.318)     
    self.param("modulation", self.TypeDouble, "Modulation (microns)", default = 0.1)    
    self.param("wg_width", self.TypeDouble, "Internal Waveguide width (microns)", default = 0.5)     
    self.param("duty", self.TypeDouble, "Duty Cycle (0 to 1)", default = 0.5)
    self.param("phase", self.TypeDouble, "Relative phase shift (microns)", default = 0)

#    self.param("textl", self.TypeLayer, "Text Layer", default = LayerInfo(10, 0))

  def display_text_impl(self):
    # Provide a descriptive text for the cell
    return "Moire_Type_A-%s-%.3f-%.3f-%.3f" % \
    (self.period_1, self.period_2, self.wg_width, self.length)
  
  def coerce_parameters_impl(self):
    pass

  def can_create_from_shape(self, layout, shape, layer):
    return False
    
  def produce_impl(self):
  
    # fetch the parameters
    dbu = self.layout.dbu
    ly = self.layout
    shapes = self.cell.shapes

    LayerSi = self.layer
    LayerSiN = ly.layer(LayerSi)
    #LayerSiSPN = ly.layer(LayerSiSP)

    # Determine the period such that the waveguide length is as desired.  Slight adjustment to period

    
      
    grating_period_1 = self.period_1 / dbu 
    grating_period_2 = self.period_2 / dbu 

    #print("N boxes: %s, grating_period_1: %s" % (N_boxes, grating_period_1) )
    
    # Draw the Bragg grating:
    box_width = int(round(grating_period_1*self.duty))
    wg_width = int(round(grating_period_1*(1-self.duty)))
    mod = self.modulation / dbu 
    w = self.wg_width / dbu
    phase = self.phase / dbu 
        
    N_boxes_1 = int(round(self.length / self.period_1))
    for i in range(0,N_boxes_1+1):
      x = int(round((i * grating_period_1 - box_width/2)))
      y = x+box_width
      box1 = Box(x, 0, x + box_width, w/2+mod)
      box2 = Box(y, 0, y + wg_width, w/2)
      shapes(LayerSiN).insert(box1)
      shapes(LayerSiN).insert(box2)
    
    box_width = int(round(grating_period_2*self.duty))
    wg_width = int(round(grating_period_2*(1-self.duty)))

    N_boxes_2 = int(round(self.length / self.period_2))
    for i in range(0,N_boxes_2+1):
          x = int(round((i * grating_period_2 - box_width/2))) + phase
          y = x+box_width
          box1 = Box(x, -w/2-mod, x + box_width, 0)
          box2 = Box(y, -w/2, y + wg_width, 0)
          shapes(LayerSiN).insert(box1)
          shapes(LayerSiN).insert(box2)


class TahmidsPCells(pya.Library):
  """
  The library where we will put the PCell into 
  """

  def __init__(self):
  
    # Set the description
    self.description = "Tahmid's PCELL Library"
    
    # Create the PCell declarations
    self.layout().register_pcell("Moire_Type_A", Moire_Type_A())
    # That would be the place to put in more PCells ...
    
    # Register us with the name "MyLib".
    # If a library with that name already existed, it will be replaced then.
    self.register("TahmidsPCells")


# Instantiate and register the library
TahmidsPCells()
